---
import { ClientRouter } from 'astro:transitions';
import '@fontsource-variable/nunito';
import '@fontsource-variable/fraunces';

import BaseHead from '@/components/BaseHead.astro';
import Footer from '@/components/Footer.astro';
import Header from '@/components/header/Header.tsx';
import Video from '@/components/Video.astro';
import CustomCursor from '@/components/CustomCursor.astro';

const { title = 'Oscar Bustos', description = 'Senior Frontend Developer', image } =
  Astro.props;
---

<!doctype html>
<html lang='en'>
  <head>
    <ClientRouter fallback='swap' />
    <BaseHead title={title} description={description} image={image} />
  </head>
  <body>

    <CustomCursor />
    <main>
      <Header client:idle />
      <slot />
      <Video />
      <Footer />
    </main>

    <script is:inline>
      // Import theme utilities
      const getPreferredTheme = () => {
        // Check localStorage first
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        
        // Check system preference
        if (typeof window !== 'undefined' && window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        
        // Default to light
        return 'light';
      };

      const applyTheme = (theme) => {
        if (typeof document === 'undefined') return;
        
        const root = document.documentElement;
        root.classList.remove('light', 'dark');
        root.classList.add(theme);
        root.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
      };

      // Get and apply initial theme
      const theme = getPreferredTheme();
      applyTheme(theme);

      // Listen for system preference changes (only if no theme is stored)
      if (typeof window !== 'undefined') {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', (e) => {
          if (!localStorage.getItem('theme')) {
            applyTheme(e.matches ? 'dark' : 'light');
          }
        });
      }
    </script>
    <!-- Previene el flash durante las transiciones -->
    <script is:inline>
      document.addEventListener('astro:before-preparation', (ev) => {
        // Use the same getPreferredTheme function for consistency
        const theme = getPreferredTheme();
        
        // Apply theme to the new document
        const root = ev.newDocument.documentElement;
        root.classList.remove('light', 'dark');
        root.classList.add(theme);
        root.setAttribute('data-theme', theme);
      });

      document.addEventListener('astro:after-swap', () => {
        // Use the same getPreferredTheme function for consistency
        const theme = getPreferredTheme();
        
        // Apply theme after the swap
        applyTheme(theme);
      });
    </script>
  </body>
</html>
